import streamlit as st
import google.generativeai as genai
import warnings

# Para ignorar mensagens de aviso
warnings.filterwarnings("ignore")

# Lista de produtos para descarte consciente
PRODUTOS = [
    "Pl√°stico", "Papel", "Metal", "L√¢mpadas", "M√≥veis", "Vidro",
    "Roupa velha", "Esponja de cozinha", "Pilhas e baterias",
    "Eletr√¥nicos", "√ìleo de cozinha usado", "Medicamentos vencidos"
]

# Fun√ß√£o para converter texto para Markdown com bullets
def to_streamlit_markdown(text):
    text = text.replace('‚Ä¢', '  *')
    return text

# Fun√ß√£o para obter instru√ß√µes de descarte
def como_descartar(produto: str, modelo):
    prompt = f"""
Voc√™ √© um assistente de pesquisa especializado em sustentabilidade. Responda com instru√ß√µes claras e sucintas,
e em bullet points sobre como descartar corretamente o seguinte item:
Item: {produto}
Apresente somente as instru√ß√µes de descarte do produto selecionado em bullet points claros e concisos.
"""
    resposta = modelo.generate_content(prompt)
    return resposta.text.strip()

# Fun√ß√£o para obter locais de coleta
def contato_local(produto: str, localizacao: str, modelo):
    prompt = f"""
Voc√™ √© um assistente. Liste poss√≠veis locais de coleta ou descarte para o item "{produto}" em "{localizacao}".
Se poss√≠vel, inclua somente na resposta:
- Nome do Local
- Endere√ßo
- Telefone
- Hor√°rio de funcionamento
D√™ a resposta sucinta em bullet points por local.
"""
    resposta = modelo.generate_content(prompt)
    return resposta.text.strip()

# --- Interface Streamlit ---

st.set_page_config(page_title="‚ôªÔ∏è Descarte Consciente", layout="wide")

st.title("‚ôªÔ∏è Sistema de Descarte Consciente ‚ôªÔ∏è")
st.markdown("Bem-vindo! Encontre informa√ß√µes sobre como descartar seus res√≠duos corretamente.")

# Configura√ß√£o da API Key do Google
GOOGLE_API_KEY = st.secrets.get("GOOGLE_API_KEY")

if not GOOGLE_API_KEY:
    st.error("‚ùóÔ∏è A chave da API n√£o foi encontrada.")
    st.stop()

# Inicializa√ß√£o do modelo
genai.configure(api_key=GOOGLE_API_KEY)
modelo = genai.GenerativeModel("gemini-2.0-flash")

# Estado da sess√£o
if 'instrucoes_descarte' not in st.session_state:
    st.session_state.instrucoes_descarte = ""
if 'locais_coleta' not in st.session_state:
    st.session_state.locais_coleta = ""
if 'produto_selecionado' not in st.session_state:
    st.session_state.produto_selecionado = None
if 'localizacao_usuario' not in st.session_state:
    st.session_state.localizacao_usuario = ""

# Inputs do usu√°rio
st.header("Informa√ß√µes para Descarte")

col1, col2 = st.columns(2)

with col1:
    localizacao_usuario = st.text_input(
        "üìç Sua cidade e estado (ex: S√£o Paulo, S√£o Paulo):",
        value=st.session_state.localizacao_usuario
    )
    st.session_state.localizacao_usuario = localizacao_usuario

with col2:
    produto_selecionado_ui = st.selectbox(
        "üóëÔ∏è Selecione o produto para descarte:",
        options=[""] + PRODUTOS,
        index=0 if not st.session_state.produto_selecionado else PRODUTOS.index(st.session_state.produto_selecionado) + 1,
        format_func=lambda x: "Selecione um item..." if x == "" else x
    )
    if produto_selecionado_ui:
        st.session_state.produto_selecionado = produto_selecionado_ui
    else:
        st.session_state.produto_selecionado = None

# Bot√£o de busca
if st.button("üîç Buscar Informa√ß√µes de Descarte", type="primary", use_container_width=True):
    if not st.session_state.localizacao_usuario.strip():
        st.warning("Por favor, insira sua localiza√ß√£o.")
    elif not st.session_state.produto_selecionado:
        st.warning("Por favor, selecione um produto.")
    else:
        with st.spinner(f"Buscando informa√ß√µes para descarte de {st.session_state.produto_selecionado}..."):
            try:
                instrucoes = como_descartar(st.session_state.produto_selecionado, modelo)
                locais = contato_local(st.session_state.produto_selecionado, st.session_state.localizacao_usuario, modelo)

                st.session_state.instrucoes_descarte = to_streamlit_markdown(instrucoes)
                st.session_state.locais_coleta = to_streamlit_markdown(locais)

                if not instrucoes and not locais:
                    st.error("N√£o foi poss√≠vel encontrar informa√ß√µes. Tente novamente ou verifique os termos da busca.")

            except Exception as e:
                st.error(f"Ocorreu um erro ao buscar as informa√ß√µes: {e}")
                st.session_state.instrucoes_descarte = ""
                st.session_state.locais_coleta = ""

# Exibi√ß√£o dos resultados
if st.session_state.produto_selecionado:
    st.markdown("---")
    st.subheader(f"üîé Resultados para descartar: {st.session_state.produto_selecionado} em {st.session_state.localizacao_usuario}")

    if st.session_state.instrucoes_descarte:
        st.markdown("### üóëÔ∏è Instru√ß√µes para Descarte Correto")
        st.markdown(st.session_state.instrucoes_descarte, unsafe_allow_html=True)
    else:
        st.info("Nenhuma instru√ß√£o de descarte encontrada para este item.")

    if st.session_state.locais_coleta:
        st.markdown("### üìç Locais de Coleta Pr√≥ximos")
        st.markdown(st.session_state.locais_coleta, unsafe_allow_html=True)
    else:
        st.info("Nenhum local de coleta encontrado para esta localiza√ß√£o.")

st.markdown("---")
st.caption("Desenvolvido com Gemini e Streamlit.")


